% Creación arreglo de 0 a 15pi, con espaciado de 0.01
x = 0:0.01:15*pi;
% Definición de dos funciones logarítmicas
log5 = @(x) log(x) / log(5);
log6 = @(x) log(x) / log(6);
% Definición funciones a graficar
a = 12*log5(3*x+7);
b = sin(4*(log2(x+8))) + cos(5*(log6(2*x+46)));

% Creación del gráfico de la función a
figure(1)

plot(x,a,'r *')
title('Funcion a')
xlabel('x')
ylabel('a')
% Se guarda imagen del gráfico de la función a
saveas(gcf,'a.png')

% Creación del gráfico de la función b
figure(2)

plot(x,b,'g +')
title('Funcion b')
xlabel('x')
ylabel('b')

% Se guarda el gráfico de la función b
saveas(gcf,'b.png')

% Creación del gráfico de las funciones a y b en conjunto
figure(3)

plot(x,a,'r *',x,b,'g +')
legend('Funcion a', 'Funcion b')
title('Funcion a y b')
xlabel('x')

% Se guarda el gráfico de las funciones a y b en conjunto
saveas(gcf,'ab.png')

% Definición de arreglo entre los valores -10 y 10 con espaciado de 0.05
y = -10:0.05:10;
% Definición de la función c
c = 7*exp(y+12);

% Creación gráfico de la función c en escala normal
figure(4)
plot(y,c)
title('Funcion exponencial c')
xlabel('x')
ylabel('c')

% Se aplica el grid al gráfico de la función c en la escala normal
grid
% Se guarda la imagend el gráfico de la función c en escala normal
saveas(gcf,'c.png')

% Creación gráfico de la función c en escala logarítmica
figure(5)
semilogy(y,c)
title('Funcion exponencial c escala logaritmica')
xlabel('x')
ylabel('c')
% Se aplica el grid al gráfico de la función c en la escala logarítmica
grid

% Se guarda la imagend el gráfico de la función c en escala logarítmica
saveas(gcf,'clog.png')

% Declaración de la variable de los polinomios
syms x

prompt = 'Ingrese el vector que representa el polinomio entre corchetes: ';

polinomio = [];
% Se solicita por consola el polinomio
try
    polinomio = input(prompt);
catch
    disp('El vector ingresado no es valido')
end

prompt = 'Ingrese el punto inicial: ';
x0 = 0;

% Se solicita por consola el punto inicial para el método de newton-
% raphson

try
    x0 = input(prompt);
catch
    disp('El numero ingresado no es valido')
end

prompt = 'Ingrese el numero de iteraciones: ';
iter = 0;

% Se solicita por consola el npumero máximo de iteraciones para el método de newton-
% raphson

try
    iter = input(prompt);
catch
    disp('El numero ingresado no es valido')
end

prompt = 'Ingrese el error mínimo: ';
error = 0;
% Se solicita por consola el punto inicial para el método de newton-
% raphson
try
    error = input(prompt);
catch
    disp('El numero ingresado no es valido')
end

fx = polinomio
raiz = newton(fx,x0,iter,error)


